name: Deploy to AKS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Run backend tests
      run: |
        cd backend
        npm run test

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm run test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      id: build-backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      id: build-frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-dev:
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Configure kubectl
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
        cluster-name: ${{ secrets.AZURE_AKS_CLUSTER_NAME }}

    - name: Deploy to AKS (Dev)
      run: |
        helm upgrade --install intellivault-dev ./deploy/helm/intellivault \
          --namespace intellivault-dev \
          --create-namespace \
          --values ./deploy/helm/intellivault/values-dev.yaml \
          --set image.tag=${{ steps.meta.outputs.tags }} \
          --set frontendImage.tag=${{ steps.meta.outputs.tags }} \
          --set secrets.cosmosKey="${{ secrets.AZURE_COSMOS_KEY }}" \
          --set secrets.storageAccountKey="${{ secrets.AZURE_STORAGE_KEY }}" \
          --set secrets.searchApiKey="${{ secrets.AZURE_SEARCH_KEY }}" \
          --set secrets.openaiApiKey="${{ secrets.AZURE_OPENAI_KEY }}" \
          --set secrets.jwtSecret="${{ secrets.JWT_SECRET }}" \
          --wait --timeout=10m

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/intellivault-dev-backend -n intellivault-dev
        kubectl wait --for=condition=available --timeout=300s deployment/intellivault-dev-frontend -n intellivault-dev
        echo "Deployment successful!"

  deploy-prod:
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Configure kubectl
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
        cluster-name: ${{ secrets.AZURE_AKS_CLUSTER_NAME }}

    - name: Deploy to AKS (Prod)
      run: |
        helm upgrade --install intellivault-prod ./deploy/helm/intellivault \
          --namespace intellivault-prod \
          --create-namespace \
          --values ./deploy/helm/intellivault/values-prod.yaml \
          --set image.tag=${{ steps.meta.outputs.tags }} \
          --set frontendImage.tag=${{ steps.meta.outputs.tags }} \
          --wait --timeout=15m

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=available --timeout=600s deployment/intellivault-prod-backend -n intellivault-prod
        kubectl wait --for=condition=available --timeout=600s deployment/intellivault-prod-frontend -n intellivault-prod
        echo "Production deployment successful!"

    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    if: failure()
    needs: [deploy-dev, deploy-prod]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Configure kubectl
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
        cluster-name: ${{ secrets.AZURE_AKS_CLUSTER_NAME }}

    - name: Rollback deployment
      run: |
        if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          helm rollback intellivault-dev -n intellivault-dev
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          helm rollback intellivault-prod -n intellivault-prod
        fi
